import { createApiRef, useApi, configApiRef, createRouteRef, createPlugin, createApiFactory, discoveryApiRef, identityApiRef, createRoutableExtension, createComponentExtension, useRouteRef } from '@backstage/core-plugin-api';
import { ResponseError } from '@backstage/errors';
import qs from 'qs';
import React, { createContext, useState, useCallback, useEffect, useContext } from 'react';
import { makeStyles, IconButton, Typography, Card, CardHeader, Button, Divider, CardContent, Select, MenuItem, List, ListItem, Checkbox, ListItemText, InputBase, InputAdornment, FormControl, FormLabel, FormControlLabel, InputLabel, Paper, Grid, Chip } from '@material-ui/core';
import { Progress, EmptyState, Table, Link, useQueryParamState, Page, Header, Content, SidebarSearchField } from '@backstage/core-components';
import FilterListIcon from '@material-ui/icons/FilterList';
import { usePrevious, useAsync, useDebounce, useEffectOnce } from 'react-use';
import SearchIcon from '@material-ui/icons/Search';
import ClearButton from '@material-ui/icons/Clear';
import { useOutlet, useLocation } from 'react-router';
import { makeStyles as makeStyles$1 } from '@material-ui/core/styles';
import InputBase$1 from '@material-ui/core/InputBase';
import IconButton$1 from '@material-ui/core/IconButton';
import { Alert } from '@material-ui/lab';
import { catalogApiRef } from '@backstage/plugin-catalog-react';
import { ENTITY_DEFAULT_NAMESPACE } from '@backstage/catalog-model';
import ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';
import ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';
import { useNavigate } from 'react-router-dom';

const searchApiRef = createApiRef({
  id: "plugin.search.queryservice",
  description: "Used to make requests against the search API"
});
class SearchClient {
  constructor(options) {
    this.discoveryApi = options.discoveryApi;
    this.identityApi = options.identityApi;
  }
  async query(query) {
    const token = await this.identityApi.getIdToken();
    const queryString = qs.stringify(query);
    const url = `${await this.discoveryApi.getBaseUrl("search/query")}?${queryString}`;
    const response = await fetch(url, {
      headers: token ? {Authorization: `Bearer ${token}`} : {}
    });
    if (!response.ok) {
      throw await ResponseError.fromResponse(response);
    }
    return response.json();
  }
}

const useStyles$8 = makeStyles((theme) => ({
  filters: {
    width: "250px",
    display: "flex"
  },
  icon: {
    margin: theme.spacing(-1, 0, 0, 0)
  }
}));
const FiltersButton$1 = ({
  numberOfSelectedFilters,
  handleToggleFilters
}) => {
  const classes = useStyles$8();
  return /* @__PURE__ */ React.createElement("div", {
    className: classes.filters
  }, /* @__PURE__ */ React.createElement(IconButton, {
    className: classes.icon,
    "aria-label": "settings",
    onClick: handleToggleFilters
  }, /* @__PURE__ */ React.createElement(FilterListIcon, null)), /* @__PURE__ */ React.createElement(Typography, {
    variant: "h6"
  }, "Filters (", numberOfSelectedFilters ? numberOfSelectedFilters : 0, ")"));
};

const useStyles$7 = makeStyles((theme) => ({
  filters: {
    background: "transparent",
    boxShadow: "0px 0px 0px 0px"
  },
  checkbox: {
    padding: theme.spacing(0, 1, 0, 1)
  },
  dropdown: {
    width: "100%"
  }
}));
const Filters$1 = ({
  filters,
  filterOptions,
  resetFilters,
  updateSelected,
  updateChecked
}) => {
  const classes = useStyles$7();
  return /* @__PURE__ */ React.createElement(Card, {
    className: classes.filters
  }, /* @__PURE__ */ React.createElement(CardHeader, {
    title: /* @__PURE__ */ React.createElement(Typography, {
      variant: "h6"
    }, "Filters"),
    action: /* @__PURE__ */ React.createElement(Button, {
      color: "primary",
      onClick: () => resetFilters()
    }, "CLEAR ALL")
  }), /* @__PURE__ */ React.createElement(Divider, null), filterOptions.kind.length === 0 && filterOptions.lifecycle.length === 0 && /* @__PURE__ */ React.createElement(CardContent, null, /* @__PURE__ */ React.createElement(Typography, {
    variant: "subtitle2"
  }, "Filters cannot be applied to available results")), filterOptions.kind.length > 0 && /* @__PURE__ */ React.createElement(CardContent, null, /* @__PURE__ */ React.createElement(Typography, {
    variant: "subtitle2"
  }, "Kind"), /* @__PURE__ */ React.createElement(Select, {
    id: "outlined-select",
    onChange: (e) => {
      var _a;
      return updateSelected((_a = e == null ? void 0 : e.target) == null ? void 0 : _a.value);
    },
    variant: "outlined",
    className: classes.dropdown,
    value: filters.selected
  }, filterOptions.kind.map((filter) => /* @__PURE__ */ React.createElement(MenuItem, {
    selected: filter === "",
    dense: true,
    key: filter,
    value: filter
  }, filter)))), filterOptions.lifecycle.length > 0 && /* @__PURE__ */ React.createElement(CardContent, null, /* @__PURE__ */ React.createElement(Typography, {
    variant: "subtitle2"
  }, "Lifecycle"), /* @__PURE__ */ React.createElement(List, {
    disablePadding: true,
    dense: true
  }, filterOptions.lifecycle.map((filter) => /* @__PURE__ */ React.createElement(ListItem, {
    key: filter,
    dense: true,
    button: true,
    onClick: () => updateChecked(filter)
  }, /* @__PURE__ */ React.createElement(Checkbox, {
    edge: "start",
    disableRipple: true,
    className: classes.checkbox,
    color: "primary",
    checked: filters.checked.includes(filter),
    tabIndex: -1,
    value: filter,
    name: filter
  }), /* @__PURE__ */ React.createElement(ListItemText, {
    id: filter,
    primary: filter
  }))))));
};

const SearchContext = createContext(void 0);
const SearchContextProvider = ({
  initialState = {
    term: "",
    pageCursor: void 0,
    filters: {},
    types: []
  },
  children
}) => {
  var _a, _b, _c, _d;
  const searchApi = useApi(searchApiRef);
  const [pageCursor, setPageCursor] = useState(initialState.pageCursor);
  const [filters, setFilters] = useState(initialState.filters);
  const [term, setTerm] = useState(initialState.term);
  const [types, setTypes] = useState(initialState.types);
  const prevTerm = usePrevious(term);
  const result = useAsync(() => searchApi.query({
    term,
    filters,
    pageCursor,
    types
  }), [term, filters, types, pageCursor]);
  const hasNextPage = !result.loading && !result.error && ((_a = result.value) == null ? void 0 : _a.nextPageCursor);
  const hasPreviousPage = !result.loading && !result.error && ((_b = result.value) == null ? void 0 : _b.previousPageCursor);
  const fetchNextPage = useCallback(() => {
    var _a2;
    setPageCursor((_a2 = result.value) == null ? void 0 : _a2.nextPageCursor);
  }, [(_c = result.value) == null ? void 0 : _c.nextPageCursor]);
  const fetchPreviousPage = useCallback(() => {
    var _a2;
    setPageCursor((_a2 = result.value) == null ? void 0 : _a2.previousPageCursor);
  }, [(_d = result.value) == null ? void 0 : _d.previousPageCursor]);
  useEffect(() => {
    if (term && prevTerm && term !== prevTerm) {
      setPageCursor(void 0);
    }
  }, [term, prevTerm, initialState.pageCursor]);
  const value = {
    result,
    filters,
    setFilters,
    term,
    setTerm,
    types,
    setTypes,
    pageCursor,
    setPageCursor,
    fetchNextPage: hasNextPage ? fetchNextPage : void 0,
    fetchPreviousPage: hasPreviousPage ? fetchPreviousPage : void 0
  };
  return /* @__PURE__ */ React.createElement(SearchContext.Provider, {
    value,
    children
  });
};
const useSearch = () => {
  const context = useContext(SearchContext);
  if (context === void 0) {
    throw new Error("useSearch must be used within a SearchContextProvider");
  }
  return context;
};

const SearchBarBase = ({
  value,
  onChange,
  onSubmit,
  className,
  placeholder: overridePlaceholder
}) => {
  const configApi = useApi(configApiRef);
  const onKeyDown = React.useCallback((e) => {
    if (onSubmit && e.key === "Enter") {
      onSubmit();
    }
  }, [onSubmit]);
  const handleClear = React.useCallback(() => {
    onChange("");
  }, [onChange]);
  const placeholder = overridePlaceholder != null ? overridePlaceholder : `Search in ${configApi.getOptionalString("app.title") || "Backstage"}`;
  return /* @__PURE__ */ React.createElement(InputBase, {
    "data-testid": "search-bar-next",
    fullWidth: true,
    placeholder,
    value,
    onChange: (e) => onChange(e.target.value),
    inputProps: {"aria-label": "Search"},
    startAdornment: /* @__PURE__ */ React.createElement(InputAdornment, {
      position: "start"
    }, /* @__PURE__ */ React.createElement(IconButton, {
      "aria-label": "Query",
      disabled: true
    }, /* @__PURE__ */ React.createElement(SearchIcon, null))),
    endAdornment: /* @__PURE__ */ React.createElement(InputAdornment, {
      position: "end"
    }, /* @__PURE__ */ React.createElement(IconButton, {
      "aria-label": "Clear",
      onClick: handleClear
    }, /* @__PURE__ */ React.createElement(ClearButton, null))),
    ...className && {className},
    ...onSubmit && {onKeyDown}
  });
};
const SearchBar$1 = ({className, debounceTime = 0}) => {
  const {term, setTerm} = useSearch();
  const [value, setValue] = useState(term);
  useEffect(() => {
    setValue((prevValue) => prevValue !== term ? term : prevValue);
  }, [term]);
  useDebounce(() => setTerm(value), debounceTime, [value]);
  const handleQuery = (newValue) => {
    setValue(newValue);
  };
  const handleClear = () => setValue("");
  return /* @__PURE__ */ React.createElement(SearchBarBase, {
    className,
    value,
    onChange: handleQuery,
    onClear: handleClear
  });
};

const useStyles$6 = makeStyles({
  label: {
    textTransform: "capitalize"
  }
});
const CheckboxFilter = ({
  className,
  name,
  defaultValue,
  values = []
}) => {
  const classes = useStyles$6();
  const {filters, setFilters} = useSearch();
  useEffect(() => {
    if (Array.isArray(defaultValue)) {
      setFilters((prevFilters) => ({
        ...prevFilters,
        [name]: defaultValue
      }));
    }
  }, []);
  const handleChange = (e) => {
    const {
      target: {value, checked}
    } = e;
    setFilters((prevFilters) => {
      const {[name]: filter, ...others} = prevFilters;
      const rest = (filter || []).filter((i) => i !== value);
      const items = checked ? [...rest, value] : rest;
      return items.length ? {...others, [name]: items} : others;
    });
  };
  return /* @__PURE__ */ React.createElement(FormControl, {
    className,
    fullWidth: true,
    "data-testid": "search-checkboxfilter-next"
  }, /* @__PURE__ */ React.createElement(FormLabel, {
    className: classes.label
  }, name), values.map((value) => {
    var _a;
    return /* @__PURE__ */ React.createElement(FormControlLabel, {
      key: value,
      control: /* @__PURE__ */ React.createElement(Checkbox, {
        color: "primary",
        tabIndex: -1,
        inputProps: {"aria-labelledby": value},
        value,
        name: value,
        onChange: handleChange,
        checked: ((_a = filters[name]) != null ? _a : []).includes(value)
      }),
      label: value
    });
  }));
};
const SelectFilter = ({
  className,
  name,
  defaultValue,
  values = []
}) => {
  const classes = useStyles$6();
  const {filters, setFilters} = useSearch();
  useEffect(() => {
    if (typeof defaultValue === "string") {
      setFilters((prevFilters) => ({
        ...prevFilters,
        [name]: defaultValue
      }));
    }
  }, []);
  const handleChange = (e) => {
    const {
      target: {value}
    } = e;
    setFilters((prevFilters) => {
      const {[name]: filter, ...others} = prevFilters;
      return value ? {...others, [name]: value} : others;
    });
  };
  return /* @__PURE__ */ React.createElement(FormControl, {
    className,
    variant: "filled",
    fullWidth: true,
    "data-testid": "search-selectfilter-next"
  }, /* @__PURE__ */ React.createElement(InputLabel, {
    className: classes.label,
    margin: "dense"
  }, name), /* @__PURE__ */ React.createElement(Select, {
    variant: "outlined",
    value: filters[name] || "",
    onChange: handleChange
  }, /* @__PURE__ */ React.createElement(MenuItem, {
    value: ""
  }, /* @__PURE__ */ React.createElement("em", null, "All")), values.map((value) => /* @__PURE__ */ React.createElement(MenuItem, {
    key: value,
    value
  }, value))));
};
const SearchFilter = ({component: Element, ...props}) => /* @__PURE__ */ React.createElement(Element, {
  ...props
});
SearchFilter.Checkbox = (props) => /* @__PURE__ */ React.createElement(SearchFilter, {
  ...props,
  component: CheckboxFilter
});
SearchFilter.Select = (props) => /* @__PURE__ */ React.createElement(SearchFilter, {
  ...props,
  component: SelectFilter
});
const SearchFilterNext = SearchFilter;

const useStyles$5 = makeStyles$1(() => ({
  root: {
    display: "flex",
    alignItems: "center"
  },
  input: {
    flex: 1
  }
}));
const SearchBar = ({
  searchQuery,
  handleSearch,
  handleClearSearchBar
}) => {
  const classes = useStyles$5();
  return /* @__PURE__ */ React.createElement(Paper, {
    component: "form",
    onSubmit: (e) => handleSearch(e),
    className: classes.root
  }, /* @__PURE__ */ React.createElement(IconButton$1, {
    disabled: true,
    type: "submit",
    "aria-label": "search"
  }, /* @__PURE__ */ React.createElement(SearchIcon, null)), /* @__PURE__ */ React.createElement(InputBase$1, {
    className: classes.input,
    placeholder: "Search in Backstage",
    value: searchQuery,
    onChange: (e) => handleSearch(e),
    inputProps: {"aria-label": "search backstage"}
  }), /* @__PURE__ */ React.createElement(IconButton$1, {
    "aria-label": "search",
    onClick: () => handleClearSearchBar()
  }, /* @__PURE__ */ React.createElement(ClearButton, null)));
};

const useStyles$4 = makeStyles((theme) => ({
  filters: {
    width: "250px",
    display: "flex"
  },
  icon: {
    margin: theme.spacing(-1, 0, 0, 0)
  }
}));
const FiltersButton = ({
  numberOfSelectedFilters,
  handleToggleFilters
}) => {
  const classes = useStyles$4();
  return /* @__PURE__ */ React.createElement("div", {
    className: classes.filters
  }, /* @__PURE__ */ React.createElement(IconButton, {
    className: classes.icon,
    "aria-label": "settings",
    onClick: handleToggleFilters
  }, /* @__PURE__ */ React.createElement(FilterListIcon, null)), /* @__PURE__ */ React.createElement(Typography, {
    variant: "h6"
  }, "Filters (", numberOfSelectedFilters ? numberOfSelectedFilters : 0, ")"));
};

const useStyles$3 = makeStyles((theme) => ({
  filters: {
    background: "transparent",
    boxShadow: "0px 0px 0px 0px"
  },
  checkbox: {
    padding: theme.spacing(0, 1, 0, 1)
  },
  dropdown: {
    width: "100%"
  }
}));
const Filters = ({
  filters,
  filterOptions,
  resetFilters,
  updateSelected,
  updateChecked
}) => {
  const classes = useStyles$3();
  return /* @__PURE__ */ React.createElement(Card, {
    className: classes.filters
  }, /* @__PURE__ */ React.createElement(CardHeader, {
    title: /* @__PURE__ */ React.createElement(Typography, {
      variant: "h6"
    }, "Filters"),
    action: /* @__PURE__ */ React.createElement(Button, {
      color: "primary",
      onClick: () => resetFilters()
    }, "CLEAR ALL")
  }), /* @__PURE__ */ React.createElement(Divider, null), filterOptions.kind.length === 0 && filterOptions.lifecycle.length === 0 && /* @__PURE__ */ React.createElement(CardContent, null, /* @__PURE__ */ React.createElement(Typography, {
    variant: "subtitle2"
  }, "Filters cannot be applied to available results")), filterOptions.kind.length > 0 && /* @__PURE__ */ React.createElement(CardContent, null, /* @__PURE__ */ React.createElement(Typography, {
    variant: "subtitle2"
  }, "Kind"), /* @__PURE__ */ React.createElement(Select, {
    id: "outlined-select",
    onChange: (e) => {
      var _a;
      return updateSelected((_a = e == null ? void 0 : e.target) == null ? void 0 : _a.value);
    },
    variant: "outlined",
    className: classes.dropdown,
    value: filters.selected
  }, filterOptions.kind.map((filter) => /* @__PURE__ */ React.createElement(MenuItem, {
    selected: filter === "",
    dense: true,
    key: filter,
    value: filter
  }, filter)))), filterOptions.lifecycle.length > 0 && /* @__PURE__ */ React.createElement(CardContent, null, /* @__PURE__ */ React.createElement(Typography, {
    variant: "subtitle2"
  }, "Lifecycle"), /* @__PURE__ */ React.createElement(List, {
    disablePadding: true,
    dense: true
  }, filterOptions.lifecycle.map((filter) => /* @__PURE__ */ React.createElement(ListItem, {
    key: filter,
    dense: true,
    button: true,
    onClick: () => updateChecked(filter)
  }, /* @__PURE__ */ React.createElement(Checkbox, {
    edge: "start",
    disableRipple: true,
    className: classes.checkbox,
    color: "primary",
    checked: filters.checked.includes(filter),
    tabIndex: -1,
    value: filter,
    name: filter
  }), /* @__PURE__ */ React.createElement(ListItemText, {
    id: filter,
    primary: filter
  }))))));
};

const useStyles$2 = makeStyles((theme) => ({
  searchQuery: {
    color: theme.palette.text.primary,
    background: theme.palette.background.default,
    borderRadius: "10%"
  },
  tableHeader: {
    margin: theme.spacing(1, 0, 0, 0),
    display: "flex"
  },
  divider: {
    width: "1px",
    margin: theme.spacing(0, 2),
    padding: theme.spacing(2, 0)
  }
}));
const columns = [
  {
    title: "Name",
    field: "name",
    highlight: true,
    render: (result) => /* @__PURE__ */ React.createElement(Link, {
      to: result.url || ""
    }, result.name)
  },
  {
    title: "Description",
    field: "description"
  },
  {
    title: "Owner",
    field: "owner"
  },
  {
    title: "Kind",
    field: "kind"
  },
  {
    title: "LifeCycle",
    field: "lifecycle"
  }
];
const TableHeader = ({
  searchQuery,
  numberOfSelectedFilters,
  numberOfResults,
  handleToggleFilters
}) => {
  const classes = useStyles$2();
  return /* @__PURE__ */ React.createElement("div", {
    className: classes.tableHeader
  }, /* @__PURE__ */ React.createElement(FiltersButton, {
    numberOfSelectedFilters,
    handleToggleFilters
  }), /* @__PURE__ */ React.createElement(Divider, {
    className: classes.divider,
    orientation: "vertical"
  }), /* @__PURE__ */ React.createElement(Grid, {
    item: true,
    xs: 12
  }, searchQuery ? /* @__PURE__ */ React.createElement(Typography, {
    variant: "h6"
  }, `${numberOfResults} `, numberOfResults > 1 ? `results for ` : `result for `, /* @__PURE__ */ React.createElement("span", {
    className: classes.searchQuery
  }, '"', searchQuery, '"'), " ") : /* @__PURE__ */ React.createElement(Typography, {
    variant: "h6"
  }, `${numberOfResults} results`)));
};
const SearchResult$1 = ({searchQuery}) => {
  const catalogApi = useApi(catalogApiRef);
  const [showFilters, toggleFilters] = useState(false);
  const [selectedFilters, setSelectedFilters] = useState({
    selected: "",
    checked: []
  });
  const [filteredResults, setFilteredResults] = useState([]);
  const {
    loading,
    error,
    value: results
  } = useAsync(async () => {
    const entities = await catalogApi.getEntities();
    return entities.items.map((entity) => {
      var _a, _b, _c, _d, _e;
      return {
        name: entity.metadata.name,
        description: entity.metadata.description,
        owner: typeof ((_a = entity.spec) == null ? void 0 : _a.owner) === "string" ? (_b = entity.spec) == null ? void 0 : _b.owner : void 0,
        kind: entity.kind,
        lifecycle: typeof ((_c = entity.spec) == null ? void 0 : _c.lifecycle) === "string" ? (_d = entity.spec) == null ? void 0 : _d.lifecycle : void 0,
        url: `/catalog/${((_e = entity.metadata.namespace) == null ? void 0 : _e.toLowerCase()) || ENTITY_DEFAULT_NAMESPACE}/${entity.kind.toLowerCase()}/${entity.metadata.name}`
      };
    });
  }, []);
  useEffect(() => {
    if (results) {
      let withFilters = results;
      if (selectedFilters.selected !== "") {
        withFilters = results.filter((result) => selectedFilters.selected.includes(result.kind));
      }
      if (selectedFilters.checked.length > 0) {
        withFilters = withFilters.filter((result) => result.lifecycle && selectedFilters.checked.includes(result.lifecycle));
      }
      if (searchQuery) {
        withFilters = withFilters.filter((result) => {
          var _a, _b, _c;
          return ((_a = result.name) == null ? void 0 : _a.toLocaleLowerCase("en-US").includes(searchQuery)) || ((_b = result.name) == null ? void 0 : _b.toLocaleLowerCase("en-US").includes(searchQuery.split(" ").join("-"))) || ((_c = result.description) == null ? void 0 : _c.toLocaleLowerCase("en-US").includes(searchQuery));
        });
      }
      setFilteredResults(withFilters);
    }
  }, [selectedFilters, searchQuery, results]);
  if (loading) {
    return /* @__PURE__ */ React.createElement(Progress, null);
  }
  if (error) {
    return /* @__PURE__ */ React.createElement(Alert, {
      severity: "error"
    }, "Error encountered while fetching search results. ", error.toString());
  }
  if (!results || results.length === 0) {
    return /* @__PURE__ */ React.createElement(EmptyState, {
      missing: "data",
      title: "Sorry, no results were found"
    });
  }
  const resetFilters = () => {
    setSelectedFilters({
      selected: "",
      checked: []
    });
  };
  const updateSelected = (filter) => {
    setSelectedFilters((prevState) => ({
      ...prevState,
      selected: filter
    }));
  };
  const updateChecked = (filter) => {
    if (selectedFilters.checked.includes(filter)) {
      setSelectedFilters((prevState) => ({
        ...prevState,
        checked: prevState.checked.filter((item) => item !== filter)
      }));
      return;
    }
    setSelectedFilters((prevState) => ({
      ...prevState,
      checked: [...prevState.checked, filter]
    }));
  };
  const filterOptions = results.reduce((acc, curr) => {
    if (curr.kind && acc.kind.indexOf(curr.kind) < 0) {
      acc.kind.push(curr.kind);
    }
    if (curr.lifecycle && acc.lifecycle.indexOf(curr.lifecycle) < 0) {
      acc.lifecycle.push(curr.lifecycle);
    }
    return acc;
  }, {
    kind: [],
    lifecycle: []
  });
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Grid, {
    container: true
  }, showFilters && /* @__PURE__ */ React.createElement(Grid, {
    item: true,
    xs: 3
  }, /* @__PURE__ */ React.createElement(Filters, {
    filters: selectedFilters,
    filterOptions,
    resetFilters,
    updateSelected,
    updateChecked
  })), /* @__PURE__ */ React.createElement(Grid, {
    item: true,
    xs: showFilters ? 9 : 12
  }, /* @__PURE__ */ React.createElement(Table, {
    options: {paging: true, pageSize: 20, search: false},
    data: filteredResults,
    columns,
    title: /* @__PURE__ */ React.createElement(TableHeader, {
      searchQuery,
      numberOfResults: filteredResults.length,
      numberOfSelectedFilters: (selectedFilters.selected !== "" ? 1 : 0) + selectedFilters.checked.length,
      handleToggleFilters: () => toggleFilters(!showFilters)
    })
  }))));
};

const LegacySearchPage = () => {
  const [queryString, setQueryString] = useQueryParamState("query");
  const [searchQuery, setSearchQuery] = useState(queryString != null ? queryString : "");
  const handleSearch = (event) => {
    event.preventDefault();
    setSearchQuery(event.target.value);
  };
  useEffect(() => setSearchQuery(queryString != null ? queryString : ""), [queryString]);
  useDebounce(() => {
    setQueryString(searchQuery);
  }, 200, [searchQuery]);
  const handleClearSearchBar = () => {
    setSearchQuery("");
  };
  return /* @__PURE__ */ React.createElement(Page, {
    themeId: "home"
  }, /* @__PURE__ */ React.createElement(Header, {
    title: "Search"
  }), /* @__PURE__ */ React.createElement(Content, null, /* @__PURE__ */ React.createElement(Grid, {
    container: true,
    direction: "row"
  }, /* @__PURE__ */ React.createElement(Grid, {
    item: true,
    xs: 12
  }, /* @__PURE__ */ React.createElement(SearchBar, {
    handleSearch,
    handleClearSearchBar,
    searchQuery
  })), /* @__PURE__ */ React.createElement(Grid, {
    item: true,
    xs: 12
  }, /* @__PURE__ */ React.createElement(SearchResult$1, {
    searchQuery: (queryString != null ? queryString : "").toLocaleLowerCase("en-US")
  })))));
};

const UrlUpdater = () => {
  const location = useLocation();
  const {
    term,
    setTerm,
    types,
    setTypes,
    pageCursor,
    setPageCursor,
    filters,
    setFilters
  } = useSearch();
  const prevQueryParams = usePrevious(location.search);
  useEffect(() => {
    if (location.search === prevQueryParams) {
      return;
    }
    const query = qs.parse(location.search.substring(1), {arrayLimit: 0}) || {};
    if (query.filters) {
      setFilters(query.filters);
    }
    if (query.query) {
      setTerm(query.query);
    }
    if (query.pageCursor) {
      setPageCursor(query.pageCursor);
    }
    if (query.types) {
      setTypes(query.types);
    }
  }, [prevQueryParams, location, setTerm, setTypes, setPageCursor, setFilters]);
  useEffect(() => {
    const newParams = qs.stringify({
      query: term,
      types,
      pageCursor,
      filters
    }, {arrayFormat: "brackets"});
    const newUrl = `${window.location.pathname}?${newParams}`;
    window.history.replaceState(null, document.title, newUrl);
  }, [term, types, pageCursor, filters]);
  return null;
};
const SearchPage$1 = () => {
  const outlet = useOutlet();
  return /* @__PURE__ */ React.createElement(SearchContextProvider, null, /* @__PURE__ */ React.createElement(UrlUpdater, null), outlet || /* @__PURE__ */ React.createElement(LegacySearchPage, null));
};

const useStyles$1 = makeStyles((theme) => ({
  root: {
    display: "flex",
    justifyContent: "space-between",
    gap: theme.spacing(2),
    margin: theme.spacing(4)
  }
}));
const SearchResultPager = () => {
  const {fetchNextPage, fetchPreviousPage} = useSearch();
  const classes = useStyles$1();
  if (!fetchNextPage && !fetchPreviousPage) {
    return /* @__PURE__ */ React.createElement(React.Fragment, null);
  }
  return /* @__PURE__ */ React.createElement("nav", {
    "arial-label": "pagination navigation",
    className: classes.root
  }, /* @__PURE__ */ React.createElement(Button, {
    "aria-label": "previous page",
    disabled: !fetchPreviousPage,
    onClick: fetchPreviousPage,
    startIcon: /* @__PURE__ */ React.createElement(ArrowBackIosIcon, null),
    size: "small"
  }, "Back"), /* @__PURE__ */ React.createElement(Button, {
    "aria-label": "next page",
    disabled: !fetchNextPage,
    onClick: fetchNextPage,
    endIcon: /* @__PURE__ */ React.createElement(ArrowForwardIosIcon, null),
    size: "small"
  }, "Next"));
};

const useStyles = makeStyles((theme) => ({
  label: {
    textTransform: "capitalize"
  },
  chips: {
    display: "flex",
    flexWrap: "wrap",
    marginTop: theme.spacing(1)
  },
  chip: {
    margin: 2
  }
}));
const SearchType = ({
  values = [],
  className,
  name,
  defaultValue
}) => {
  const classes = useStyles();
  const {types, setTypes} = useSearch();
  useEffectOnce(() => {
    if (!types.length) {
      if (defaultValue && Array.isArray(defaultValue)) {
        setTypes(defaultValue);
      } else if (defaultValue) {
        setTypes([defaultValue]);
      }
    }
  });
  const handleChange = (e) => {
    const value = e.target.value;
    setTypes(value);
  };
  return /* @__PURE__ */ React.createElement(FormControl, {
    className,
    variant: "filled",
    fullWidth: true,
    "data-testid": "search-typefilter-next"
  }, /* @__PURE__ */ React.createElement(InputLabel, {
    className: classes.label,
    margin: "dense"
  }, name), /* @__PURE__ */ React.createElement(Select, {
    multiple: true,
    variant: "outlined",
    value: types,
    onChange: handleChange,
    placeholder: "All Results",
    renderValue: (selected) => /* @__PURE__ */ React.createElement("div", {
      className: classes.chips
    }, selected.map((value) => /* @__PURE__ */ React.createElement(Chip, {
      key: value,
      label: value,
      className: classes.chip,
      size: "small"
    })))
  }, values.map((value) => /* @__PURE__ */ React.createElement(MenuItem, {
    key: value,
    value
  }, /* @__PURE__ */ React.createElement(Checkbox, {
    checked: types.indexOf(value) > -1
  }), /* @__PURE__ */ React.createElement(ListItemText, {
    primary: value
  })))));
};

const rootRouteRef = createRouteRef({
  path: "/search",
  title: "search"
});
const rootNextRouteRef = createRouteRef({
  path: "/search-next",
  title: "search"
});
const searchPlugin = createPlugin({
  id: "search",
  apis: [
    createApiFactory({
      api: searchApiRef,
      deps: {discoveryApi: discoveryApiRef, identityApi: identityApiRef},
      factory: ({discoveryApi, identityApi}) => {
        return new SearchClient({discoveryApi, identityApi});
      }
    })
  ],
  routes: {
    root: rootRouteRef,
    nextRoot: rootNextRouteRef
  }
});
const SearchPage = searchPlugin.provide(createRoutableExtension({
  component: () => import('./index-03e6e5c1.esm.js').then((m) => m.SearchPage),
  mountPoint: rootRouteRef
}));
const SearchPageNext = searchPlugin.provide(createRoutableExtension({
  component: () => import('./index-03e6e5c1.esm.js').then((m) => m.SearchPage),
  mountPoint: rootNextRouteRef
}));
searchPlugin.provide(createComponentExtension({
  component: {
    lazy: () => import('./index-5da0411f.esm.js').then((m) => m.SearchBar)
  }
}));
const SearchBarNext = searchPlugin.provide(createComponentExtension({
  component: {
    lazy: () => import('./index-5da0411f.esm.js').then((m) => m.SearchBar)
  }
}));
const SearchResult = searchPlugin.provide(createComponentExtension({
  component: {
    lazy: () => import('./index-329be754.esm.js').then((m) => m.SearchResult)
  }
}));
searchPlugin.provide(createComponentExtension({
  component: {
    lazy: () => import('./index-329be754.esm.js').then((m) => m.SearchResult)
  }
}));
const DefaultResultListItem = searchPlugin.provide(createComponentExtension({
  component: {
    lazy: () => import('./index-92a9e2ec.esm.js').then((m) => m.DefaultResultListItem)
  }
}));
const HomePageSearchBar = searchPlugin.provide(createComponentExtension({
  component: {
    lazy: () => import('./index-b832898d.esm.js').then((m) => m.HomePageSearchBar)
  }
}));

const SidebarSearch = () => {
  const searchRoute = useRouteRef(rootRouteRef);
  const navigate = useNavigate();
  const handleSearch = useCallback((query) => {
    const queryString = qs.stringify({query}, {addQueryPrefix: true});
    navigate(`${searchRoute()}${queryString}`);
  }, [navigate, searchRoute]);
  return /* @__PURE__ */ React.createElement(SidebarSearchField, {
    onSearch: handleSearch,
    to: "/search"
  });
};

export { DefaultResultListItem as D, Filters$1 as F, HomePageSearchBar as H, SearchPage$1 as S, SearchBar$1 as a, SearchBarBase as b, FiltersButton$1 as c, SearchContextProvider as d, SearchFilter as e, SearchFilterNext as f, SearchResultPager as g, SearchType as h, SidebarSearch as i, SearchBarNext as j, SearchPage as k, SearchPageNext as l, searchPlugin as m, SearchResult as n, rootRouteRef as r, searchApiRef as s, useSearch as u };
//# sourceMappingURL=index-f5f6f3f0.esm.js.map
