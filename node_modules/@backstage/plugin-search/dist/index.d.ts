/// <reference types="react" />
import * as _backstage_core_plugin_api from '@backstage/core-plugin-api';
import * as _backstage_search_common from '@backstage/search-common';
import { SearchQuery, SearchResultSet } from '@backstage/search-common';
import { JsonObject } from '@backstage/config';
import React, { ReactElement } from 'react';
import { AsyncState } from 'react-use/lib/useAsync';

declare const searchApiRef: _backstage_core_plugin_api.ApiRef<SearchApi>;
interface SearchApi {
    query(query: SearchQuery): Promise<SearchResultSet>;
}

declare type FiltersButtonProps = {
    numberOfSelectedFilters: number;
    handleToggleFilters: () => void;
};
declare const FiltersButton: ({ numberOfSelectedFilters, handleToggleFilters, }: FiltersButtonProps) => JSX.Element;

declare type FiltersState = {
    selected: string;
    checked: Array<string>;
};
declare type FilterOptions = {
    kind: Array<string>;
    lifecycle: Array<string>;
};
declare type FiltersProps = {
    filters: FiltersState;
    filterOptions: FilterOptions;
    resetFilters: () => void;
    updateSelected: (filter: string) => void;
    updateChecked: (filter: string) => void;
};
declare const Filters: ({ filters, filterOptions, resetFilters, updateSelected, updateChecked, }: FiltersProps) => JSX.Element;

declare type Props$1 = {
    className?: string;
    debounceTime?: number;
    placeholder?: string;
};
declare const SearchBar: ({ className, debounceTime, placeholder, }: Props$1) => JSX.Element;

declare type SearchContextValue = {
    result: AsyncState<SearchResultSet>;
    term: string;
    setTerm: React.Dispatch<React.SetStateAction<string>>;
    types: string[];
    setTypes: React.Dispatch<React.SetStateAction<string[]>>;
    filters: JsonObject;
    setFilters: React.Dispatch<React.SetStateAction<JsonObject>>;
    pageCursor?: string;
    setPageCursor: React.Dispatch<React.SetStateAction<string | undefined>>;
    fetchNextPage?: React.DispatchWithoutAction;
    fetchPreviousPage?: React.DispatchWithoutAction;
};
declare type SettableSearchContext = Omit<SearchContextValue, 'result' | 'setTerm' | 'setTypes' | 'setFilters' | 'setPageCursor' | 'fetchNextPage' | 'fetchPreviousPage'>;
declare const SearchContextProvider: ({ initialState, children, }: React.PropsWithChildren<{
    initialState?: SettableSearchContext | undefined;
}>) => JSX.Element;
declare const useSearch: () => SearchContextValue;

declare type Component = {
    className?: string;
    name: string;
    values?: string[];
    defaultValue?: string[] | string | null;
};
declare type Props = Component & {
    component: (props: Component) => ReactElement;
    debug?: boolean;
};
declare const SearchFilter: {
    ({ component: Element, ...props }: Props): JSX.Element;
    Checkbox(props: Omit<Props, 'component'> & Component): JSX.Element;
    Select(props: Omit<Props, 'component'> & Component): JSX.Element;
};
/**
 * @deprecated This component was used for rapid prototyping of the Backstage
 * Search platform. Now that the API has stabilized, you should use the
 * <SearchFilter /> component instead. This component will be removed in an
 * upcoming release.
 */
declare const SearchFilterNext: {
    ({ component: Element, ...props }: Props): JSX.Element;
    Checkbox(props: Omit<Props, 'component'> & Component): JSX.Element;
    Select(props: Omit<Props, 'component'> & Component): JSX.Element;
};

declare const SearchPage$1: () => JSX.Element;

declare const SearchResultPager: () => JSX.Element;

declare type SearchTypeProps = {
    className?: string;
    name: string;
    values?: string[];
    defaultValue?: string[] | string | null;
};
declare const SearchType: ({ values, className, name, defaultValue, }: SearchTypeProps) => JSX.Element;

declare const SidebarSearch: () => JSX.Element;

declare const searchPlugin: _backstage_core_plugin_api.BackstagePlugin<{
    root: _backstage_core_plugin_api.RouteRef<undefined>;
    nextRoot: _backstage_core_plugin_api.RouteRef<undefined>;
}, {}>;
declare const SearchPage: () => JSX.Element;
/**
 * @deprecated This component was used for rapid prototyping of the Backstage
 * Search platform. Now that the API has stabilized, you should use the
 * <SearchPage /> component instead. This component will be removed in an
 * upcoming release.
 */
declare const SearchPageNext: () => JSX.Element;
/**
 * @deprecated This component was used for rapid prototyping of the Backstage
 * Search platform. Now that the API has stabilized, you should use the
 * <SearchBar /> component instead. This component will be removed in an
 * upcoming release.
 */
declare const SearchBarNext: ({ className, debounceTime, placeholder, }: {
    className?: string | undefined;
    debounceTime?: number | undefined;
    placeholder?: string | undefined;
}) => JSX.Element;
declare const SearchResult: ({ children }: {
    children: (results: {
        results: _backstage_search_common.SearchResult[];
    }) => JSX.Element;
}) => JSX.Element;
declare const DefaultResultListItem: ({ result }: {
    result: _backstage_search_common.IndexableDocument;
}) => JSX.Element;
declare const HomePageSearchBar: ({ placeholder }: {
    placeholder?: string | undefined;
}) => JSX.Element;

export { DefaultResultListItem, Filters, FiltersButton, FiltersState, HomePageSearchBar, SearchPage$1 as Router, SearchBar, SearchBarNext, SearchContextProvider, SearchFilter, SearchFilterNext, SearchPage, SearchPageNext, SearchResult, SearchResultPager, SearchType, SidebarSearch, searchPlugin as plugin, searchApiRef, searchPlugin, useSearch };
